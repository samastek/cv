"use client"; 
// This directive is specific to Next.js and ensures the code is executed on the client side.

import * as React from "react"; 
// Importing React for creating components.

import { Slot } from "@radix-ui/react-slot"; 
// Importing `Slot` from Radix UI, which allows for flexible component composition.

import { cva, type VariantProps } from "class-variance-authority"; 
// `cva` is a utility to create class names based on variants, which helps in managing dynamic class composition.
// `VariantProps` is a type helper to infer the types of these variants.

import { cn } from "@/lib/utils"; 
// A utility function, presumably short for "class names", to combine class strings conditionally.

const buttonVariants = cva(
  // Base styles applied to all buttons:
  // "inline-flex" makes the button an inline flex container to align its contents.
  // "items-center" vertically centers the content inside the button.
  // "justify-center" horizontally centers the content inside the button.
  // "whitespace-nowrap" prevents text from wrapping to a new line.
  // "rounded-md" applies medium rounded corners to the button.
  // "text-sm" sets the font size to small.
  // "font-medium" ensures the button text has medium boldness.
  // "ring-offset-background" creates space between the button and its focus ring.
  // "transition-colors" allows for smooth color transitions (e.g., on hover).
  // "focus-visible:outline-none" removes the default outline when the button is focused.
  // "focus-visible:ring-2" adds a 2px ring around the button when focused.
  // "focus-visible:ring-ring" sets the color of the ring when the button is focused.
  // "focus-visible:ring-offset-2" applies an offset of 2px to the ring for better visibility.
  // "disabled:pointer-events-none" disables pointer events when the button is disabled.
  // "disabled:opacity-50" reduces the opacity to 50% when the button is disabled, making it look inactive.
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    // Variants allow us to create different styles for buttons.
    variants: {
      variant: {
        // Primary button: Background and text colors for main actions, with a slight opacity change on hover.
        default: "bg-primary text-primary-foreground hover:bg-primary/90",

        // Destructive button: Red background and matching text colors for actions like delete. Slightly darkens on hover.
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",

        // Outline button: Transparent background with a border. Background and text change on hover.
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",

        // Secondary button: A subtle background and text color for less important actions, slightly darkens on hover.
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",

        // Ghost button: No visible background by default, changes to accent color on hover.
        ghost: "hover:bg-accent hover:text-accent-foreground",

        // Link button: Styled to look like a text link with an underline that appears on hover.
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        // Default size: Medium-sized button with padding for comfortable clicks.
        default: "h-10 px-4 py-2",

        // Small size: A compact button with reduced height and padding.
        sm: "h-9 rounded-md px-3",

        // Large size: Bigger button for more prominent actions, with increased height and padding.
        lg: "h-11 rounded-md px-8",

        // Icon size: Square button designed specifically for icons, equal height and width.
        icon: "h-10 w-10",
      },
    },
    // Default settings if no variant or size is specified.
    defaultVariants: {
      variant: "default", // Primary button style is the default.
      size: "default",    // Medium size is the default.
    },
  },
);


interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean; 
  // `asChild` allows this component to act as a wrapper for another component (e.g., `<a>` or `<div>`).
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"; 
    // If `asChild` is true, render the `Slot` component. Otherwise, render a standard HTML `<button>`.

    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        // Combining the classes generated by `buttonVariants` with any additional `className` passed as a prop.
        ref={ref}
        {...props} 
        // Spread the remaining props (e.g., `onClick`, `disabled`) onto the component.
      />
    );
  },
);

Button.displayName = "Button"; 
// Setting a display name for debugging and developer tools.

export { Button }; 
// Exporting the `Button` component for external use.
